#include <Lua/LuaBinding.h>
#include <Lua/LuaSerializers.h>
#include <Lua/Shared/LuaPropertyMapHelpers.h>
#include <GameDefinitions/ResourceDefinitions.h>

namespace bg3se::lua
{
	DECLARE_CLS(BaseResourceDefinition);
	DECLARE_CLS(ActionResource);
	DECLARE_CLS(ClassDescriptionResource);
	DECLARE_CLS(TagResource);
	DECLARE_CLS(FactionResource);
	DECLARE_CLS(RaceResource);
	DECLARE_CLS(OriginResource);
	DECLARE_CLS(BackgroundResource);
	DECLARE_CLS(GodResource);
	DECLARE_CLS(ProgressionResource);
	DECLARE_CLS(ProgressionDescriptionResource);
	DECLARE_CLS(GossipDefinition);
	DECLARE_CLS(ActionResourceGroupDefinition);
	DECLARE_CLS(ColorDefinitionResource);
	DECLARE_CLS(EquipmentTypeResource);
	DECLARE_CLS(FlagResource);
	DECLARE_CLS(FeatResource);
	DECLARE_CLS(FeatDescriptionResource);

	void RegisterResourceDefinitions(lua_State* L)
	{
		REGISTER_CLS(BaseResourceDefinition);
		REGISTER_CLS(ActionResource);
		REGISTER_CLS(ClassDescriptionResource);
		REGISTER_CLS(TagResource);
		REGISTER_CLS(FactionResource);
		REGISTER_CLS(RaceResource);
		REGISTER_CLS(OriginResource);
		REGISTER_CLS(BackgroundResource);
		REGISTER_CLS(GodResource);
		REGISTER_CLS(ProgressionResource);
		REGISTER_CLS(ProgressionDescriptionResource);
		REGISTER_CLS(GossipDefinition);
		REGISTER_CLS(ActionResourceGroupDefinition);
		REGISTER_CLS(ColorDefinitionResource);
		REGISTER_CLS(EquipmentTypeResource);
		REGISTER_CLS(FlagResource);
		REGISTER_CLS(FeatResource);
		REGISTER_CLS(FeatDescriptionResource);

		{
			CLS(BaseResourceDefinition);
			P_RO(ResourceUUID);
		}

		{
			CLS(ActionResource);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(DisplayName);
			P(Description);
			P(Error);
			P(MaxLevel);
			P(DiceType);
			P(ReplenishType);
			P(ShowOnActionResourcePanel);
			P(UpdatesSpellPowerLevel);
			P(PartyActionResource);
			P(IsSpellResource);
		}

		{
			CLS(ClassDescriptionResource);
			INHERIT(BaseResourceDefinition);
			P(ParentGuid);
			P(Name);
			P(DisplayName);
			P(Description);
			P(ProgressionTableUUID);
			P(MagicType);
			P(SoundMagicType);
			P(PrimaryAbility);
			P(SpellCastingAbility);
			P(MustPrepareSpells);
			P(Tags);
			P(ClassEquipment);
			P(CharacterCreationPose);
			P(LearningStrategy);
			P(BaseHp);
			P(HpPerLevel);
		}

		{
			CLS(TagResource);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(Description);
			P(Categories);
			P(DisplayName);
			P(DisplayDescription);
		}

		{
			CLS(FactionResource);
			INHERIT(BaseResourceDefinition);
			P(Faction);
			P(ParentGuid);
		}

		{
			CLS(RaceResource);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(DisplayName);
			P(Description);
			P(ParentGuid);
			P(Tags);
			P(ProgressionTableUUID);
			P(RaceSoundSwitch);
			P(HairColors);
			P(SkinColors);
			P(EyeColors);
			P(TattooColors);
			P(MakeupColors);
			P(Visuals);
			P(Gods);
			P(ExcludedGods);
		}

		{
			CLS(OriginResource);
			INHERIT(BaseResourceDefinition);
			P(AvailableInCharacterCreation);
			P(Name);
			P(DisplayName);
			P(Description);
			P(Gender);
			P(RaceUUID);
			P(SubRaceUUID);
			P(BackgroundUUID);
			P(GodUUID);
			P(ClassUUID);
			P(SubClassUUID);
			P(LockClass);
			P(GlobalTemplate);
			P(Passives);
			P(Tags);
			P(Flags);
			P(Overview);
			P(CloseUpA);
			P(CloseUpB);
			P(ClassEquipmentOverride);
			P(VoiceTableUUID);
		}

		{
			CLS(BackgroundResource);
			INHERIT(BaseResourceDefinition);
			P(DisplayName);
			P(Description);
			P(Passives);
			P(Tags);
		}

		{
			CLS(GodResource);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(DisplayName);
			P(Description);
			P(Tags);
		}

		{
			CLS(ProgressionResource);
			INHERIT(BaseResourceDefinition);
			P(TableUUID);
			P(Name);
			P(SubClasses);
			P(PassivesAdded);
			P(PassivesRemoved);
			P(Boosts);
			P(ProgressionType);
			P(Level);
			P(AllowImprovement);
			P(SelectAbilities);
			P(SelectSkills);
			P(SelectSpells);
			P(SelectPassives);
			P(AddSpells);
		}

		{
			CLS(ProgressionDescriptionResource);
			INHERIT(BaseResourceDefinition);
			P(DisplayName);
			P(Description);
			P(Hidden);
			P(ExactMatch);
			P(Type);
			P(ParamMatch);
			P(ProgressionId);
			P(ProgressionTableId);
			P(SelectorId);
			P(PassivePrototype);
		}

		{
			CLS(GossipDefinition);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(Type);
			P(Priority);
			P(ConditionFlags);
			P(ResultFlags);
			P(DialogUUID);
		}

		{
			CLS(ActionResourceGroupDefinition);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(field_38);
			P(field_48);
			P(ActionResourceDefinitions);
		}

		{
			CLS(ColorDefinitionResource);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(DisplayName);
			P(Color);
		}

		{
			CLS(EquipmentTypeResource);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(WeaponType_OneHanded);
			P(WeaponType_TwoHanded);
			P(BoneMainSheathed);
			P(BoneMainUnsheathed);
			P(BoneOffHandSheathed);
			P(BoneOffHandUnsheathed);
			P(BoneVersatileSheathed);
			P(BoneVersatileUnsheathed);
			P(SourceBoneSheathed);
			P(SourceBoneVersatileSheathed);
			P(SourceBoneVersatileUnsheathed);
			P(SoundAttackType);
			P(SoundEquipmentType);
		}

		{
			CLS(FlagResource);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(Description);
			P(Usage);
		}

		{
			CLS(FeatResource);
			INHERIT(BaseResourceDefinition);
			P(Name);
			P(Requirements);
			P(PassivesAdded);
			P(PassivesRemoved);
			P(Boosts);
			P(SelectAbilities);
			P(SelectSkills);
			P(SelectSpells);
			P(SelectPassives);
			P(AddSpells);
		}

		{
			CLS(FeatDescriptionResource);
			INHERIT(BaseResourceDefinition);
			P(DisplayName);
			P(Description);
			P(Hidden);
			P(ExactMatch);
			P(Type);
			P(ParamMatch);
			P(FeatId);
			P(SelectorId);
			P(PassivePrototype);
		}
	}
}
