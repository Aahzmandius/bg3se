BEGIN_CLS(ActionOriginator)
P(ActionGuid)
P(PassiveId)
END_CLS()


BEGIN_CLS(esv::ItemGeneration)
P(StatsId)
P(ItemType)
P(Random)
P(Level)
P(Boosts)
END_CLS()


BEGIN_CLS(esv::PlayerData)
P(PlayerHandle)
P(LevelUpMarker)
P(QuestSelected)
P_REF(CustomData)
P(SomeHandle)
P(HelmetOption)
P(Renown)
P(CachedTension)
P(IsInDangerZone)
P(OriginalTemplate)
P(Region)
END_CLS()


BEGIN_CLS(esv::Character)
// Properties
P_RO(GUID)
P_RO(NetID)
P_RO(Flags)
P_RO(CurrentLevel)
P_RO(Handle)
P_REF_PTR(CurrentTemplate)
P_REF_PTR(OriginalTemplate)
P_REF_PTR(TemplateUsedForSpells)
P_RO(Flags2)
P_RO(Flags3)
P_RO(WaitForTeleportAck)
P_RO(Team)
P_RO(HasOsirisDialog)
P_RO(NeedsUpdate)
P_RO(ForceSynch)
P_RO(InventoryHandle)
P_RO(IsDialogAiControlled)
P_RO(LifeTime)
P_RO(TurnTimer)
P_RO(TriggerTrapsTimer)
P_RO(UserID)
P_RO(ReservedUserID)
P_RO(OwnerCharacterHandle)
P_RO(FollowCharacterHandle)
P_RO(EnemyCharacterHandle)
P_RO(SpiritCharacterHandle)
P_RO(CorpseCharacterHandle)
P_RO(EnemyHandleSet)
P_RO(SummonHandleSet)
P_RO(MovementAP)
// P_RO(AnimType)
// P_RO(DelayDeathCount)
P_RO(RegisteredTriggers)
P_REF_PTR(PlayerData)
P_RO(MovementSpeedMultiplier)
P_RO(PartyHandle)
P_RO(CreatedTemplateItems)
P_RO(Treasures)
P_RO(CustomTradeTreasure)
P_RO(MovingCasterHandle)
P_RO(EquipmentColor)
P_RO(ProjectileTemplate)
P_RO(TimeElapsed)
P_RO(PreferredAiTargetTags)
P_RO(TagsFromItems)
P_RO(ReadyCheckBlocked)
P_RO(CorpseLootable)
P_RO(PreviousLevel)

// Functions
P_FUN(GetInventoryItems, CharacterGetInventoryItems)
P_FUN(GetSkills, CharacterGetSkills)
P_FUN(GetSkillInfo, CharacterGetSkillInfo)
P_FUN(GetNearbyCharacters, CharacterGetNearbyCharacters)
P_FUN(GetSummons, CharacterGetSummons)
P_FUN(HasTag, GameObjectHasTag<esv::Character>)
P_FUN(GetTags, GameObjectGetTags<esv::Character>)
P_FUN(GetStatus, (GameObjectGetStatus<esv::Character, esv::Status>))
P_FUN(GetStatusByType, (GameObjectGetStatusByType<esv::Character, esv::Status>))
P_FUN(GetStatuses, (GameObjectGetStatuses<esv::Character>))
P_FUN(GetStatusObjects, (GameObjectGetStatusObjects<esv::Character, esv::Status>))
END_CLS()


BEGIN_CLS(esv::PlayerCustomData)
P_RO(Initialized)
P(CustomLookEnabled)
P(ClothColor1)
P(ClothColor2)
P(ClothColor3)
P(ClassType)
P(MusicInstrumentID)
P(OwnerProfileID)
P(ReservedProfileID)
P(AiPersonality)
END_CLS()


BEGIN_CLS(esv::Item)
P_RO(GUID)
P_RO(NetID)
P_RO(Flags)
P_RO(CurrentLevel)
P_RO(Handle)
P_RO(Flags2)
P_RO(MovingCount)
P_REF_PTR(CurrentTemplate)
P_REF_PTR(OriginalTemplate)
P(CustomDescription2)
P(CustomDescription)
P_RO(StatsId)
// P_REF_PTR(Stats) - FIXME is this used at all?
P_REF_PTR(Generation)
P_RO(InventoryHandle)
P_RO(ParentHandle)
P(Amount)
P(Vitality)
P(Armor)
P_RO(InUseByCharacterHandle_M)
P_RO(UserId_M)
P_RO(OwnerHandle)
P_RO(OriginalOwnerCharacterHandle)
P(ItemType)
P(GoldValueOverwrite)
P(WeightValueOverwrite)
P_RO(TeleportTargetOverrideHandle)
P(TreasureLevel)
P_RO(InheritedForceSynch)
P_RO(ForceSynch)
P_RO(TeleportsUseCount)
P(DisableUse)
P_RO(PreviousLevel)

P_FUN(GetInventoryItems, ItemGetInventoryItems)
P_FUN(GetNearbyCharacters, ItemGetNearbyCharacters)
P_FUN(GetGeneratedBoosts, ItemGetInventoryItems)
P_FUN(GetInventoryItems, ItemGetGeneratedBoosts)
P_FUN(HasTag, GameObjectHasTag<esv::Item>)
P_FUN(GetTags, GameObjectGetTags<esv::Item>)
P_FUN(GetStatus, (GameObjectGetStatus<esv::Item, esv::Status>))
P_FUN(GetStatusByType, (GameObjectGetStatusByType<esv::Item, esv::Status>))
P_FUN(GetStatuses, (GameObjectGetStatuses<esv::Item>))
P_FUN(GetStatusObjects, (GameObjectGetStatusObjects<esv::Item, esv::Status>))
END_CLS()



BEGIN_CLS(esv::Status)
P_RO(NetID)
P_RO(StoryActionID)
P_REF(Originator)
P_RO(StatusId)
P_RO(StartTimer)
P_RO(LifeTime)
P_RO(CurrentLifeTime)
P_RO(TurnTimer)
P_RO(Strength)
P_RO(CauseType)
// FIXME - return combined OwnerHandle+StatusHandle? P_RO(StatusHandle)
// P_RO(UnknownHandle)
P_RO(OwnerHandle)
P_RO(StatusOwner)
P_RO(StatusSourceEntityHandle_M)
P_RO(StatusSourceUUID)
P_RO(StatusSourceEntityHandle)
P_RO(CleansedByHandle_M)
P_RO(field_110)
P_RO(Conditions)
P_RO(RemoveEvents)
P_RO(Flags2)
P_RO(Flags0)
P_RO(TickType)
P_RO(Flags3)
P_RO(SomeFlags)

P_FUN(GetEngineType, StatusGetEngineType)
END_CLS()
